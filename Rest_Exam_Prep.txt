1) What is REST

2) Why REST

SOAP (vs) REST 

Allows you to transfer data w.r.t. Various Formats as

		1) XML
		2) JSON
		3) Plain Text
		4) HTML Text
		5) String

3) What are the HTTP Methods are available 

HTTP methods
Following four HTTP methods are commonly used in REST based architecture.
•	GET − Provides a read only access to a resource.
•	POST − Used to create a new resource.
•	DELETE − Used to remove a resource.
•	PUT − Used to update a existing resource or create a new resource.


4) @Path annotation ???

	Relative path of the resource class/method.

5) @GET

HTTP Get request, used to fetch resource.

6) @POST

7) @Produces
States the HTTP Response generated by web service. For example, APPLICATION/XML, TEXT/HTML, APPLICATION/JSON etc.

8) @Consumes

States the HTTP Request type. For example, application/x-www-formurlencoded to accept form data in HTTP body during POST request.

9) @PathParam
Binds the parameter passed to the method to a value in path.

10) If the 
application context name is api 
and server runs in 8080 port 
application name as RestHello

how to call the below methods, 


class Path is demo

 @GET
    @Produces(MediaType.APPLICATION_JSON)
    public String sayHello() {
        return "Welcome to Rest WebServices in FTP115";
    }

    @GET
    @Path("/sum/{i}/{j}")
    @Produces(MediaType.APPLICATION_JSON)
    public String sum(@PathParam("i") int i, @PathParam("j") int j) {
        int c = i+j;
        
        String res = "sum is " +c;
        return res;
    }


404 (Not Found)
The 404 error status code indicates that the REST API can’t map the client’s URI to a resource but may be available in the future. Subsequent requests by the client are permissible.

405 (Method Not Allowed)
The API responds with a 405 error to indicate that the client tried to use an HTTP method that the resource does not allow. For instance, a read-only resource could support only GET and HEAD, while a controller resource might allow GET and POST, but not PUT or DELETE.

401 (Unauthorized)
A 401 error response indicates that the client tried to operate on a protected resource without providing the proper authorization. It may have provided the wrong credentials or none at all. The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource.

The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic information.

403 (Forbidden)
A 403 error response indicates that the client’s request is formed correctly, but the REST API refuses to honor it, i.e., the user does not have the necessary permissions for the resource. A 403 response is not a case of insufficient client credentials; that would be 401 (“Unauthorized”).

Authentication will not help, and the request SHOULD NOT be repeated. Unlike a 401 Unauthorized response, authenticating will make no difference.

204 (No Content)
The 204 status code is usually sent out in response to a PUT, POST, or DELETE request when the REST API declines to send back any status message or representation in the response message’s body.

An API may also send 204 in conjunction with a GET request to indicate that the requested resource exists, but has no state representation to include in the body.

If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent’s active document view. However, any new or updated metainformation SHOULD be applied to the document currently in the user agent’s dynamic view.

The 204 response MUST NOT include a message-body and thus is always terminated by the first empty line after the header fields.

200 (OK)
It indicates that the REST API successfully carried out whatever action the client requested and that no more specific code in the 2xx series is appropriate.

GET an entity corresponding to the requested resource is sent in the response;
HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body;
POST an entity describing or containing the result of the action;
TRACE an entity containing the request message as received by the end server.


http://localhost:8080/RestHello/api/demo
http://localhost:8080/RestHello/api/demo/sum/12/5














